 for (int i = 0; i < cellsHeight; i+=cellHeight-1){

        for (int j = 0; j < cellsWidth; j+=cellsHeight-1){

            cellPosition = cellCenterToPosition(i, j, cellWidth, cellHeight);

            cost=0.0;

            for (itDef = defenses.begin(); itDef != defenses.end(); ++itDef){

                //Si es la defensa más cercana, que compruebe los obstáculos

                //if(_distance((*itDef)->position, cellPosition) < r){

                    float rr= _distance((*itDef)->position, cellPosition);

                    for (itObs = obstacles.begin(); itObs != obstacles.end(); ++itObs){

                        //Si el obstaculo se interpone, aumenta el coste

                        if(_distance((*itObs)->position, cellPosition) - (*itObs)->radio <= rr &&

                        

                       (( ((*itObs)->position.y > j && (*itObs)->position.y < (*itDef)->position.y) ||

                        ((*itObs)->position.y < j && (*itObs)->position.y > (*itDef)->position.y)) &&



                        ((*itObs)->position.x> i && (*itObs)->position.x< (*itDef)->position.x) ||

                        ((*itObs)->position.x< i && (*itObs)->position.x> (*itDef)->position.x))

                        )

                       {

                            rr += _distance(cellPosition, (*itObs)->position);

                        }

                    }

                //}

                //if(rr < r) r = rr;

                cost +=(rr + defenseCost(*itDef));

            }



            additionalCost[i][j] = cost ;

        }

    }
